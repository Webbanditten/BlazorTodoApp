@page "/home"
@page "/"
@using BlazorApp.Models;
@using BlazorApp.Services;
@using BlazorApp.Components.TodoItem;
@using BlazorApp.Components.Icon;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject BlazorApp.Services.IDummyDataService dummyDataService
@inject BlazorApp.Services.ITodoDataService todoDataService

<PageTitle>TodoApp</PageTitle>
<div class="flex items-center justify-center w-screen p-12 font-medium  text-gray-600">
  <div class="flex flex-grow items-center justify-center h-full">
    <!-- Component Start -->
    <div class="max-w-full p-8 bg-white rounded-lg shadow-lg w-96">
      <div class="flex items-center mb-6">
        <Icon icon="IconType.Envelope" />
        <h4 class="font-semibold ml-3 text-lg">@myTodoList.Title</h4>
      </div>
      @{
        if (myTodoList.Items.Count > 0)
        {
              <div class="flex flex-col gap-2">
            @foreach (var item in myTodoList.Items)
            {
                    <TodoItem Id="@item.Id" Title="@item.Title" Metadata="@item.Metadata" />
            }
              </div>
        }
      }
      <div class="flex items-center w-full h-8 px-2 mt-2 text-sm font-medium rounded">
        <Icon icon="IconType.Plus" />
        <input id="title" name="title" @onkeyup="addTaskOnEnter" @bind="taskTitle"
          class="flex-grow h-8 ml-4 bg-transparent focus:outline-none font-medium" type="text"
          placeholder="add a new task" />
      </div>
      <div class="flex items-center w-full h-8 px-2 mt-2 text-sm font-medium rounded">
        <button class="p-2" @onclick="() => add(5)">Add 5 random</button>
        <button class="p-2" @onclick="() => add(1000)">Add 1000 random</button>
        <button class="p-2" @onclick="clear">Clear all</button>
      </div>
    </div>
    <!-- Component End  -->
  </div>
</div>

@code {
  TodoList myTodoList = new TodoList { Title = "Patrick's todo", Items = new List<TodoListItem>() { } };
  private string? taskTitle = "";
  protected override async Task OnInitializedAsync()
  {
    // Lets check if we already have a todo list in local storage
    var todoListItems = await todoDataService.GetTodoItems();
    if (todoListItems.Count() != 0)
    {
      myTodoList.Items.AddRange(todoListItems);
    }
    else
    {
      Console.WriteLine("No todo items found in local storage");
      // Lets generate some random todo items and add them to the initial list
      var todoItems = await dummyDataService.GetRandomTodoItems(5);
      myTodoList.Items.AddRange(todoItems);

      await todoDataService.SaveTodoItems(todoItems);
    }

  }

  private async Task add(int count)
  {
    var todoItems = await dummyDataService.GetRandomTodoItems(count);
    await todoDataService.SaveTodoItems(todoItems);
    myTodoList.Items.AddRange(todoItems);

    await todoDataService.SaveTodoItems(todoItems);
  }

  private async Task clear()
  {
    await todoDataService.ClearTodoItems();
    myTodoList.Items.Clear();
  }

  private async Task addTaskOnEnter(KeyboardEventArgs e)
  {
    if ((e.Key == "Enter" || e.Key == "NumpadEnter") && !string.IsNullOrEmpty(taskTitle))
    {
      var newItem = new TodoListItem
        {
          Id = Guid.NewGuid(),
          Title = taskTitle,
          Metadata = new TodoListItemMetadata
          {
            IsDone = false,
            CreatedAt = DateTime.Now
          }
        };
      myTodoList.Items.Add(newItem);
      await todoDataService.AddTodoItem(newItem);
      taskTitle = null;
    }
  }
}
