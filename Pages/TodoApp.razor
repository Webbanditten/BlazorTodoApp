@page "/home"
@page "/"
@using BlazorApp.Models;
@using BlazorApp.Services;
@using BlazorApp.Components.TodoItem;
@using BlazorApp.Components.Icon;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject BlazorApp.Services.IDummyDataService dummyDataService

<PageTitle>TodoApp</PageTitle>
<style>
  .rotate-45 {
    --transform-rotate: 45deg;
    transform: rotate(45deg);
  }

  .group:hover .group-hover\:flex {
    display: flex;
  }

  input[type=checkbox]:checked+label span:first-of-type {
    background-color: #10B981;
    border-color: #10B981;
    color: #fff;
  }

  input[type=checkbox]:checked+label span:nth-of-type(2) {
    text-decoration: line-through;
    color: #9CA3AF;
  }
</style>
<div class="flex items-center justify-center w-screen h-screen font-medium">
  <div class="flex flex-grow items-center justify-center h-full text-gray-600 bg-gray-200">
    <!-- Component Start -->
    <div class="max-w-full p-8 bg-white rounded-lg shadow-lg w-96">
      <div class="flex items-center mb-6">
        <Icon icon="IconType.Envelope" />
        <h4 class="font-semibold ml-3 text-lg">@myTodoList.Title</h4>
      </div>
      @{
        if (myTodoList.Items.Count > 0)
        {
          <div class="flex flex-col gap-2">
            @for (int i = 0; i < myTodoList.Items.Count; i++)
            {
              <TodoItem Id="@i" Title="@myTodoList.Items[i].Title" Metadata="@myTodoList.Items[i].Metadata" />
            }
          </div>
        }
      }
      <button class="flex items-center w-full h-8 px-2 mt-2 text-sm font-medium rounded">

        <Icon icon="IconType.Plus" />
        <input @onkeyup="addTaskOnEnter" @bind="taskTitle"
          class="flex-grow h-8 ml-4 bg-transparent focus:outline-none font-medium" type="text"
          placeholder="add a new task" />
      </button>
    </div>
    <!-- Component End  -->
  </div>
</div>

@code {
  TodoList myTodoList = new TodoList { Title = "My Todo List", Items = new List<TodoListItem>() { } };
  private string? name;
  protected override async Task OnInitializedAsync()
  {
    //var todoItems = await dummyDataService.GetRandomTodoItems(10000);
    var todoItems = await dummyDataService.GetRandomTodoItems(5);
    myTodoList.Items.AddRange(todoItems);
    await localStorage.SetItemAsync("name", "John Smith");
    name = await localStorage.GetItemAsync<string>("name");
    Console.WriteLine(name);

  }

  private void addTaskOnEnter(KeyboardEventArgs e)
  {
    if ((e.Key == "Enter" || e.Key == "NumpadEnter") && !string.IsNullOrEmpty(taskTitle))
    {
      myTodoList.Items.Add(new TodoListItem
        {
          Title = taskTitle,
          Metadata = new TodoListItemMetadata
          {
            IsDone = false,
            CreatedAt = DateTime.Now
          }
        });
      taskTitle = null;
    }
  }

  private string? taskTitle = "";

}
